Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DBCG

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DBCG) [1] /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(2,18)
  -> INDIRECT-: (274,12)  dbcg_$MATVEC_V$1b.0.1
  -> INDIRECT-: (279,12)  dbcg_$MSOLVE_V$1d.0.1
  -> INDIRECT-: (280,12)  dbcg_$MTSOLV_V$1e.0.1
  -> (282,11) ISDBCG
  -> INDIRECT-: (313,15)  dbcg_$MATVEC_V$1b.0.1
  -> INDIRECT-: (322,15)  dbcg_$MTTVEC_V$1c.0.1
  -> INDIRECT-: (324,15)  dbcg_$MSOLVE_V$1d.0.1
  -> INDIRECT-: (325,15)  dbcg_$MTSOLV_V$1e.0.1
  -> (328,14) ISDBCG


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(275,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(275,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(304,16)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(304,16)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END


Non-optimizable loops:


LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(290,10)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

    Report from: Code generation optimizations [cg]

/glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(2,18):remark #34051: REGISTER ALLOCATION : [dbcg_] /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f:2

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     248
            Global    :      71
            Local     :     177
        Regenerable   :      84
        Spilled       :      14
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       2 [1.07e-01 ~ 0.1%]
            Writes    :       4 [2.24e-01 ~ 0.2%]
        Spills        :      72 bytes*
            Reads     :      27 [1.79e+00 ~ 1.8%]
            Writes    :      13 [1.22e+00 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ISDBCG

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ISDBCG) [2] /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(884,16)
  -> INDIRECT-: (1051,18)  isdbcg_$MSOLVE_V$e2.0.4


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(1058,13)
   remark #15315: loop was not vectorized: estimated number of iterations (1) is insufficient for vectorization
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(1058,13)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(884,16):remark #34051: REGISTER ALLOCATION : [isdbcg_] /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f:884

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     147
            Global    :      45
            Local     :     102
        Regenerable   :      75
        Spilled       :       6
        
    Routine stack
        Variables     :     112 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       8 [3.57e+00 ~ 3.6%]
        Spills        :       8 bytes*
            Reads     :       2 [1.65e+00 ~ 1.6%]
            Writes    :       7 [1.92e+00 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DSDBCG

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DSDBCG) [3] /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(345,18)
  -> INLINE: (585,12) DBCG
    -> INDIRECT-: (274,12)  dbcg_$MATVEC_V$1b.0.1.6
    -> INDIRECT-: (279,12)  dbcg_$MSOLVE_V$1d.0.1.6
    -> INDIRECT-: (280,12)  dbcg_$MTSOLV_V$1e.0.1.6
    -> (282,11) ISDBCG
    -> INDIRECT-: (313,15)  dbcg_$MATVEC_V$1b.0.1.6
    -> INDIRECT-: (322,15)  dbcg_$MTTVEC_V$1c.0.1.6
    -> INDIRECT-: (324,15)  dbcg_$MSOLVE_V$1d.0.1.6
    -> INDIRECT-: (325,15)  dbcg_$MTSOLV_V$1e.0.1.6
    -> (328,14) ISDBCG


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(275,10) inlined into /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(585,12)
   remark #15300: LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(275,10) inlined into /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(585,12)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(304,16) inlined into /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(585,12)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(304,16) inlined into /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(585,12)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END


Non-optimizable loops:


LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(290,10) inlined into /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(585,12)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

    Report from: Code generation optimizations [cg]

/glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(345,18):remark #34051: REGISTER ALLOCATION : [dsdbcg_] /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f:345

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     295
            Global    :      74
            Local     :     221
        Regenerable   :      72
        Spilled       :      28
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       4 [4.17e-01 ~ 0.4%]
            Writes    :       6 [8.39e-01 ~ 0.8%]
        Spills        :     184 bytes*
            Reads     :      79 [4.82e+00 ~ 4.8%]
            Writes    :      27 [4.97e+00 ~ 5.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DSLUBC

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DSLUBC) [4] /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(594,18)
  -> INLINE: (875,12) DBCG
    -> INDIRECT-: (274,12)  dbcg_$MATVEC_V$1b.0.1.5
    -> INDIRECT-: (279,12)  dbcg_$MSOLVE_V$1d.0.1.5
    -> INDIRECT-: (280,12)  dbcg_$MTSOLV_V$1e.0.1.5
    -> (282,11) ISDBCG
    -> INDIRECT-: (313,15)  dbcg_$MATVEC_V$1b.0.1.5
    -> INDIRECT-: (322,15)  dbcg_$MTTVEC_V$1c.0.1.5
    -> INDIRECT-: (324,15)  dbcg_$MSOLVE_V$1d.0.1.5
    -> INDIRECT-: (325,15)  dbcg_$MTSOLV_V$1e.0.1.5
    -> (328,14) ISDBCG


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(817,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(819,10) ]
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(823,16)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between nu (826:35) and nu (828:19)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(823,16)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(275,10) inlined into /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(875,12)
   remark #15300: LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(275,10) inlined into /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(875,12)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(304,16) inlined into /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(875,12)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(304,16) inlined into /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(875,12)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END


Non-optimizable loops:


LOOP BEGIN at /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(290,10) inlined into /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(875,12)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

    Report from: Code generation optimizations [cg]

/glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f(594,18):remark #34051: REGISTER ALLOCATION : [dslubc_] /glade/u/home/tvda/CISM/libglimmer-solve/SLAP/dbcg.f:594

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     347
            Global    :      99
            Local     :     248
        Regenerable   :      75
        Spilled       :      35
        
    Routine stack
        Variables     :      64 bytes*
            Reads     :       4 [2.16e-01 ~ 0.2%]
            Writes    :      10 [8.05e-01 ~ 0.8%]
        Spills        :     240 bytes*
            Reads     :      90 [3.98e+00 ~ 4.0%]
            Writes    :      36 [4.86e+00 ~ 4.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
