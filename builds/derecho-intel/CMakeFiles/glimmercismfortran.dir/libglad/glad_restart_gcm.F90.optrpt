Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: glad_restart_gcm._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (glad_restart_gcm._) [1] /glade/u/home/tvda/CISM/libglad/glad_restart_gcm.F90(29,9)


    Report from: Code generation optimizations [cg]

/glade/u/home/tvda/CISM/libglad/glad_restart_gcm.F90(29,9):remark #34051: REGISTER ALLOCATION : [glad_restart_gcm._] /glade/u/home/tvda/CISM/libglad/glad_restart_gcm.F90:29

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: GLAD_RESTART_GCM::GLAD_READ_RESTART_GCM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (GLAD_RESTART_GCM::GLAD_READ_RESTART_GCM) [2] /glade/u/home/tvda/CISM/libglad/glad_restart_gcm.F90(67,15)


    Report from: Code generation optimizations [cg]

/glade/u/home/tvda/CISM/libglad/glad_restart_gcm.F90(78,5):remark #34026: call to memcpy implemented as a call to optimized library version
/glade/u/home/tvda/CISM/libglad/glad_restart_gcm.F90(83,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
/glade/u/home/tvda/CISM/libglad/glad_restart_gcm.F90(67,15):remark #34051: REGISTER ALLOCATION : [glad_restart_gcm_mp_glad_read_restart_gcm_] /glade/u/home/tvda/CISM/libglad/glad_restart_gcm.F90:67

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      57
            Global    :      16
            Local     :      41
        Regenerable   :      14
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
